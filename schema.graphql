input AUTH_PROVIDER_CREDENTIALS {
  email: String!
  password: String!
}

type AllowedWebsite {
  domain: String!
  id: ID!
}

"""
The connection type for AllowedWebsite.
"""
type AllowedWebsiteConnection {
  """
  A list of edges.
  """
  edges: [AllowedWebsiteEdge]

  """
  A list of nodes.
  """
  nodes: [AllowedWebsite]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AllowedWebsiteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AllowedWebsite
}

input AuthProviderSignupData {
  credentials: AUTH_PROVIDER_CREDENTIALS
}

"""
Autogenerated input type of CreateAllowedWebsite
"""
input CreateAllowedWebsiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  domain: String!
}

"""
Autogenerated return type of CreateAllowedWebsite
"""
type CreateAllowedWebsitePayload {
  allowedWebsite: AllowedWebsite!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of CreateLink
"""
input CreateLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  url: String!
}

"""
Autogenerated return type of CreateLink
"""
type CreateLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  link: Link!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  authProvider: AuthProviderSignupData

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

"""
Autogenerated input type of CreateUserPost
"""
input CreateUserPostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  postData: USER_POST_INPUT!
}

"""
Autogenerated return type of CreateUserPost
"""
type CreateUserPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userPost: Post!
}

"""
Autogenerated input type of DeleteUserPost
"""
input DeleteUserPostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of DeleteUserPost
"""
type DeleteUserPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

type Link {
  description: String!
  id: ID!
  url: String!
}

type Mutation {
  createAllowedWebsite(input: CreateAllowedWebsiteInput!): CreateAllowedWebsitePayload
  createLink(input: CreateLinkInput!): CreateLinkPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  createUserPost(input: CreateUserPostInput!): CreateUserPostPayload
  deleteUserPost(input: DeleteUserPostInput!): DeleteUserPostPayload
  signIn(input: SignInInput!): SignInPayload
  updateUserPost(input: UpdateUserPostInput!): UpdateUserPostPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Post {
  content: String!
  id: ID!
  published: Boolean!
  title: String!
}

"""
The connection type for Post.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]

  """
  A list of nodes.
  """
  nodes: [Post]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Post
}

type Query {
  allowedWebsites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AllowedWebsiteConnection!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PostConnection!
  user: User!
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  credentials: AUTH_PROVIDER_CREDENTIALS
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String
  user: User
}

input USER_POST_INPUT {
  content: String!
  published: Boolean
  title: String!
}

input USER_POST_UPDATE_INPUT {
  content: String
  published: Boolean
  title: String
}

"""
Autogenerated input type of UpdateUserPost
"""
input UpdateUserPostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
  postData: USER_POST_UPDATE_INPUT!
}

"""
Autogenerated return type of UpdateUserPost
"""
type UpdateUserPostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userPost: Post!
}

type User {
  applicationCode: String!
  email: String!
  id: ID!
  name: String!
}